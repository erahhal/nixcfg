#!/usr/bin/env bash

# Mullvad Random Relay Connector
# This script picks random WireGuard relays and tests connectivity

set -euo pipefail

# Configuration
MAX_ATTEMPTS=15
TIMEOUT_SECONDS=10
TEST_URL="https://httpbin.org/ip"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to wait for connection to be established
wait_for_connection() {
    local max_wait=10
    local count=0

    print_status $BLUE "Waiting for connection to establish..."

    while [ $count -lt $max_wait ]; do
        if mullvad status | grep -q "Connected"; then
            print_status $GREEN "âœ“ Connection established"
            return 0
        fi
        sleep 1
        ((count++))
        echo -n "."
    done

    echo
    print_status $RED "âœ— Connection not established within ${max_wait} seconds"
    return 1
}

# Function to test internet connectivity
test_connection() {
    local timeout=$1
    print_status $BLUE "Testing connection with ${timeout}s timeout..."

    if timeout ${timeout} curl -s --max-time ${timeout} "${TEST_URL}" > /dev/null 2>&1; then
        print_status $GREEN "âœ“ Connection test successful!"
        return 0
    else
        print_status $RED "âœ— Connection test failed or timed out"
        return 1
    fi
}

# Function to get WireGuard relay list
get_wireguard_relays() {
    print_status $BLUE "Fetching Mullvad relay list..."

    # Get relay list and filter for WireGuard relays
    mullvad relay list | grep -E "^\s+[a-z]{2}-[a-z]{3}-wg-[0-9]{3}" | sed 's/^\s*//' | cut -d' ' -f1
}

# Function to disconnect from current relay
disconnect_mullvad() {
    print_status $YELLOW "Disconnecting from current relay..."
    if mullvad disconnect > /dev/null 2>&1; then
        print_status $GREEN "âœ“ Disconnected successfully"
    else
        print_status $YELLOW "! Already disconnected or disconnect failed"
    fi
}

# Function to connect to a specific relay
connect_to_relay() {
    local relay=$1
    print_status $BLUE "Setting relay to: ${relay}"

    if mullvad relay set location "${relay}" > /dev/null 2>&1; then
        print_status $GREEN "âœ“ Relay location set successfully"
    else
        print_status $RED "âœ— Failed to set relay location"
        return 1
    fi

    print_status $BLUE "Connecting to Mullvad..."
    if mullvad connect > /dev/null 2>&1; then
        print_status $GREEN "âœ“ Connect command executed"

        # Wait for the connection to actually be established
        if wait_for_connection; then
            return 0
        else
            return 1
        fi
    else
        print_status $RED "âœ— Failed to execute connect command"
        return 1
    fi
}

# Function to shuffle array (Fisher-Yates shuffle)
shuffle_array() {
    local array=("$@")
    local i

    for ((i=${#array[@]}-1; i>0; i--)); do
        local j=$((RANDOM % (i+1)))
        local temp=${array[i]}
        array[i]=${array[j]}
        array[j]=$temp
    done

    printf '%s\n' "${array[@]}"
}

# Main function
main() {
    print_status $GREEN "=== Mullvad Random Relay Connector ==="
    print_status $BLUE "Max attempts: ${MAX_ATTEMPTS}"
    print_status $BLUE "Connection timeout: ${TIMEOUT_SECONDS}s"
    echo

    # Check if mullvad command is available
    if ! command -v mullvad &> /dev/null; then
        print_status $RED "Error: mullvad command not found. Please install Mullvad CLI."
        exit 1
    fi

    # Get list of WireGuard relays
    local relays
    if ! relays=($(get_wireguard_relays)); then
        print_status $RED "Error: Failed to get relay list"
        exit 1
    fi

    if [ ${#relays[@]} -eq 0 ]; then
        print_status $RED "Error: No WireGuard relays found"
        exit 1
    fi

    print_status $GREEN "Found ${#relays[@]} WireGuard relays"

    # Shuffle the relay list for randomness
    local shuffled_relays
    readarray -t shuffled_relays < <(shuffle_array "${relays[@]}")

    # Disconnect from current connection
    disconnect_mullvad

    # Try connecting to relays
    local attempt=1
    local success=false

    for relay in "${shuffled_relays[@]}"; do
        if [ $attempt -gt $MAX_ATTEMPTS ]; then
            break
        fi

        echo
        print_status $YELLOW "=== Attempt ${attempt}/${MAX_ATTEMPTS} ==="
        print_status $BLUE "Trying relay: ${relay}"

        # Try to connect to the relay
        if connect_to_relay "${relay}"; then
            # Add a small delay to ensure connection is fully established
            sleep 2

            # Test the connection
            if test_connection $TIMEOUT_SECONDS; then
                print_status $GREEN "ðŸŽ‰ Successfully connected to ${relay}!"

                # Show current IP
                print_status $BLUE "Current IP information:"
                if timeout 5 curl -s "${TEST_URL}" 2>/dev/null; then
                    echo
                fi

                success=true
                break
            else
                print_status $YELLOW "Connection established but test failed, trying next relay..."
                disconnect_mullvad
                sleep 1  # Brief pause before trying next relay
            fi
        else
            print_status $YELLOW "Failed to connect, trying next relay..."
            disconnect_mullvad
            sleep 1  # Brief pause before trying next relay
        fi

        ((attempt++))
    done

    echo
    if [ "$success" = true ]; then
        print_status $GREEN "=== SUCCESS ==="
        print_status $GREEN "Connected to a working relay after $((attempt-1)) attempts"
    else
        print_status $RED "=== FAILURE ==="
        print_status $RED "Failed to connect to any working relay after ${MAX_ATTEMPTS} attempts"
        disconnect_mullvad
        exit 1
    fi
}

# Handle script interruption
trap 'echo; print_status $YELLOW "Script interrupted. Disconnecting..."; disconnect_mullvad; exit 1' INT TERM

# Run main function
main "$@"
